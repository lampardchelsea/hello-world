/**
Explaination of why we can degrade 2D to 1D array and why we need loop backwards

https://leetcode.com/problems/partition-equal-subset-sum/
Given a non-empty array nums containing only positive integers, find if the array can be partitioned into two 
subsets such that the sum of elements in both subsets is equal.

Example 1:
Input: nums = [1,5,11,5]
Output: true
Explanation: The array can be partitioned as [1, 5, 5] and [11].

Example 2:
Input: nums = [1,2,3,5]
Output: false
Explanation: The array cannot be partitioned into equal sum subsets.

Constraints:
1 <= nums.length <= 200
1 <= nums[i] <= 100

Refer to
https://leetcode.com/problems/partition-equal-subset-sum/discuss/90592/01-knapsack-detailed-explanation
0/1 knapsack detailed explanation
This problem is essentially let us to find whether there are several numbers in a set which are able to sum to 
a specific value (in this problem, the value is sum/2).

Actually, this is a 0/1 knapsack problem, for each number, we can pick it or not. Let us assume dp[i][j] means 
whether the specific sum j can be gotten from the first i numbers. If we can pick such a series of numbers from 
0-i whose sum is j, dp[i][j] is true, otherwise it is false.

Base case: dp[0][0] is true; (zero number consists of sum 0 is true)

Transition function: For each number, if we don't pick it, dp[i][j] = dp[i-1][j], which means if the first i-1 
elements has made it to j, dp[i][j] would also make it to j (we can just ignore nums[i]). If we pick nums[i]. 
dp[i][j] = dp[i-1][j-nums[i]], which represents that j is composed of the current value nums[i] and the remaining 
composed of other previous numbers. Thus, the transition function is dp[i][j] = dp[i-1][j] || dp[i-1][j-nums[i]]

talking is cheap:

public boolean canPartition(int[] nums) {
    int sum = 0;
    
    for (int num : nums) {
        sum += num;
    }
    
    if ((sum & 1) == 1) {
        return false;
    }
    sum /= 2;

    int n = nums.length;
    boolean[][] dp = new boolean[n+1][sum+1];
    for (int i = 0; i < dp.length; i++) {
        Arrays.fill(dp[i], false);
    }
    
    dp[0][0] = true;
    
    for (int i = 1; i < n+1; i++) {
        dp[i][0] = true;
    }
    for (int j = 1; j < sum+1; j++) {
        dp[0][j] = false;
    }
    
    for (int i = 1; i < n+1; i++) {
        for (int j = 1; j < sum+1; j++) {
            dp[i][j] = dp[i-1][j];
            if (j >= nums[i-1]) {
                dp[i][j] = (dp[i][j] || dp[i-1][j-nums[i-1]]);
            }
        }
    }
   
    return dp[n][sum];
}

But can we optimize it? It seems that we cannot optimize it in time. But we can optimize in space. 
We currently use two dimensional array to solve it, but we can only use one dimensional array.

So the code becomes:

public boolean canPartition(int[] nums) {
    int sum = 0;
    
    for (int num : nums) {
        sum += num;
    }
    
    if ((sum & 1) == 1) {
        return false;
    }
    sum /= 2;
    
    int n = nums.length;
    boolean[] dp = new boolean[sum+1];
    Arrays.fill(dp, false);
    dp[0] = true;
    
    for (int num : nums) {
        for (int i = sum; i > 0; i--) {
            if (i >= num) {
                dp[i] = dp[i] || dp[i-num];
            }
        }
    }
    
    return dp[sum];
}
 
 
 
https://leetcode.com/problems/partition-equal-subset-sum/discuss/90592/01-knapsack-detailed-explanation/241664
Yes, the magic is observation from the induction rule/recurrence relation!
For this problem, the induction rule:
If not picking nums[i - 1], then dp[i][j] = dp[i - 1][j]
if picking nums[i - 1], then dp[i][j] = dp[i - 1][j - nums[i - 1]]
You can see that if you point them out in the matrix, it will be like:

			  j
	. . . . . . . . . . . . 
	. . . . . . . . . . . .  
	. . ? . . ? . . . . . .  ?(left): dp[i - 1][j - nums[i]], ?(right): dp[i - 1][j]
i	. . . . . # . . . . . .  # dp[i][j]
	. . . . . . . . . . . . 
	. . . . . . . . . . . . 
	. . . . . . . . . . . . 
	. . . . . . . . . . . . 
	. . . . . . . . . . . . 
 
Optimize to O(2*n): you can see that dp[i][j] only depends on previous row, so you can 
optimize the space by only using 2 rows instead of the matrix. Let's say array1 and array2. 
Every time you finish updating array2, array1 have no value, you can copy array2 to array1 
as the previous row of the next new row.
Optimize to O(n): you can also see that, the column indices of dp[i - 1][j - nums[i]] and 
dp[i - 1][j] are <= j. The conclusion you can get is: the elements of previous row whose 
column index is > j(i.e. dp[i - 1][j + 1 : n - 1]) will not affect the update of dp[i][j] 
since we will not touch them:

			  j
	. . . . . . . . . . . . 
	. . . . . . . . . . . .  
	. . ? . . ? x x x x x x  you will not touch x for dp[i][j]
i	. . . . . # . . . . . .  # dp[i][j]
	. . . . . . . . . . . . 
	. . . . . . . . . . . . 
	. . . . . . . . . . . . 
	. . . . . . . . . . . . 
	. . . . . . . . . . . . 
 
Thus if you merge array1 and array2 to a single array, if you update array backwards, 
all dependencies are not touched!

    (n represents new value, i.e. updated)
	. . ? . . ? n n n n n n n
              #  
However if you update forwards, dp[j - nums[i - 1]] is updated already, you cannot use it:

    (n represents new value, i.e. updated)
	n n n n n ? . . . . . .  where another ? goes? Oops, it is overriden, we lost it :(
              #  
Conclusion:
So the rule is that observe the positions of current element and its dependencies in the matrix. 
Mostly if current elements depends on the elements in previous row(most frequent case)/columns, 
you can optimize the space.
*/

// Let's see one good example about revolution from N * N to 2 * N to N
/**
https://leetcode.com/problems/triangle/
Given a triangle array, return the minimum path sum from top to bottom.

For each step, you may move to an adjacent number of the row below. More formally, if you are on index i 
on the current row, you may move to either index i or index i + 1 on the next row.

Example 1:
Input: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]
Output: 11
Explanation: The triangle looks like:
   2
  3 4
 6 5 7
4 1 8 3
The minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).

Example 2:
Input: triangle = [[-10]]
Output: -10

Constraints:
1 <= triangle.length <= 200
triangle[0].length == 1
triangle[i].length == triangle[i - 1].length + 1
-104 <= triangle[i][j] <= 104
*/

// Solution 1: Native Recursive
// Refer to
// https://leetcode.com/problems/triangle/discuss/159686/Java-Recursive-greaterTop-Down-greater-Bottom-up-greater-Bottom-Up-%2B-Optimal-Space
class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
       if(triangle == null || triangle.size() == 0) return 0;
       return dfs(0, 0, triangle);
    }

    private int dfs(int row, int pos, List<List<Integer>> triangle) {
        // Out of bounds so just return sum previous value must be leaf node
        if(row + 1 >= triangle.size()) return triangle.get(row).get(pos);     
        return triangle.get(row).get(pos) + Math.min(dfs(row + 1, pos, triangle), dfs(row + 1, pos + 1, triangle));
    }
}

// Solution 2: Top Down DP (2D-DP -> N * N)
// Refer to
// https://leetcode.com/problems/triangle/discuss/159686/Java-Recursive-greaterTop-Down-greater-Bottom-up-greater-Bottom-Up-%2B-Optimal-Space
class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
       if(triangle == null || triangle.size() == 0) return 0;
       Integer[][] cache = new Integer[triangle.size()][triangle.size()];
       return dfs(0, 0, triangle, cache);
    }

    private int dfs(int row, int pos, List<List<Integer>> triangle,  Integer[][] cache) {
        // Out of bounds so just return sum previous value must be leaf node
        if(row + 1 >= triangle.size()) return triangle.get(row).get(pos);
        if(cache[row][pos] != null) return cache[row][pos];
        cache[row][pos] = triangle.get(row).get(pos) + Math.min(dfs(row + 1, pos, triangle, cache), dfs(row + 1, pos + 1, triangle, cache));
        return cache[row][pos];
   }
}

// Solution 3: Bottom Up DP (2D-DP -> N * N)
// Refer to
// https://leetcode.com/problems/triangle/discuss/38730/DP-Solution-for-Triangle/36543
/**
This problem is quite well-formed in my opinion. The triangle has a tree-like structure, which would lead people to think about 
traversal algorithms such as DFS. However, if you look closely, you would notice that the adjacent nodes always share a 'branch'. 
In other word, there are overlapping subproblems. Also, suppose x and y are 'children' of k. Once minimum paths from x and y to 
the bottom are known, the minimum path starting from k can be decided in O(1), that is optimal substructure. Therefore, dynamic 
programming would be the best solution to this problem in terms of time complexity.
What I like about this problem even more is that the difference between 'top-down' and 'bottom-up' DP can be 'literally' pictured 
in the input triangle. For 'top-down' DP, starting from the node on the very top, we recursively find the minimum path sum of each 
node. When a path sum is calculated, we store it in an array (memoization); the next time we need to calculate the path sum of the 
same node, just retrieve it from the array. However, you will need a cache that is at least the same size as the input triangle 
itself to store the pathsum, which takes O(N^2) space. With some clever thinking, it might be possible to release some of the 
memory that will never be used after a particular point, but the order of the nodes being processed is not straightforwardly seen 
in a recursive solution, so deciding which part of the cache to discard can be a hard job.
'Bottom-up' DP, on the other hand, is very straightforward: we start from the nodes on the bottom row; the min pathsums for these 
nodes are the values of the nodes themselves. From there, the min pathsum at the ith node on the kth row would be the lesser of the 
pathsums of its two children plus the value of itself, i.e.:
minpath[k][i] = min( minpath[k+1][i], minpath[k+1][i+1]) + triangle[k][i];
*/
class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        int rowNum = triangle.size();
        int colNum = triangle.get(rowNum - 1).size();
        int[][] dp = new int[rowNum][colNum];
        for(int i = 0; i < colNum; i++) {
            dp[rowNum - 1][i] = triangle.get(rowNum - 1).get(i);
        }
        for(int row = rowNum - 2; row >= 0; row--) {
            for(int col = 0; col < triangle.get(row).size(); col++) {
                dp[row][col] = triangle.get(row).get(col) + Math.min(dp[row + 1][col], dp[row + 1][col + 1]);
            }
        }
        return dp[0][0];
    }
}

// Solution 4: Bottom Up DP (1D-DP Optimize Space from (n * n) to (2 * n))
// Refer to
// https://leetcode.com/problems/triangle/discuss/159686/Java-Recursive-greaterTop-Down-greater-Bottom-up-greater-Bottom-Up-%2B-Optimal-Space
/**
Optimize Space from (n * n) to (2 * n): 
You can see that dp[i][j] only depends on previous(lower row, more close to leaf) row, we 
can optimize the space by only using 2 rows instead of the matrix. Let's say dp and dp1.
Every time you finish updating dp1, dp have previous value, you can copy dp1 to dp as the 
previous row value need update to new row value.
   2
  3 4
 6 5 7
4 1 8 3
                                                     dp = dp1                          dp = dp1                              dp = dp1
dp: [0, 0, 0, 0] -> [4, 1, 8, 3] -> [4, 1, 8, 3]  -> [7, 6, 10, 0] -> [7, 6, 10, 0] -> [9, 10, 10, 0] -> [9, 10, 10, 0]   -> [11, 10, 10, 0]
dp1:[0, 0, 0, 0] -> [0, 0, 0, 0] -> [7, 6, 10, 0] -> [7, 6, 10, 0] -> [9, 10, 10, 0] -> [9, 10, 10, 0] -> [11, 10, 10, 0] -> [11, 10, 10, 0]
*/
class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        int rowNum = triangle.size();
        int colNum = triangle.get(rowNum - 1).size();
        int[] dp = new int[colNum];
        int[] dp1 = new int[colNum];
        for(int i = 0; i < colNum; i++) {
            dp[i] = triangle.get(rowNum - 1).get(i);
        }
        for(int row = rowNum - 2; row >= 0; row--) {
            for(int col = 0; col < triangle.get(row).size(); col++) {
                dp1[col] = triangle.get(row).get(col) + Math.min(dp[col], dp[col + 1]);
            }
            dp = dp1;
        }
        return dp[0];
    }
}

// Solution 5: Bottom Up DP (1D-DP Optimize Space from (2 * n) to n)
// Refer to
// https://leetcode.com/problems/triangle/discuss/38730/DP-Solution-for-Triangle
// https://github.com/lampardchelsea/hello-world/blob/master/leetcode/DynamicProgramming/Document/Pattern_1_0_1_Knapsack/How_downgrade_2D_to_1D_and_why_loop_backwards.txt
/**
Think about why no need reverse for inner for-loop, is that because previous re-assign dp[i] will not affect later dp[i] need to re-assign ?
You can also see that, the column indices of dp[row + 1][col + 1] and dp[row][col] are >= col. 
The conclusion you can get is: the elements of previous (lower row more close to leaf) row 
whose column index is < col(i.e. dp[row + 1][0 : col - 1]) will not affect the update of 
dp[row][col] since we will not touch them:
new dp[0] defined by dp[0], dp[1] --> safe to update dp[0] 
(e.g initialized dp[] = {4,1,8,3}, dp[0] = 4, dp[1] = 1, new dp[0] = min(4, 1) + 6 = 7, now dp[] = {7,1,8,3})
new dp[1] defined by dp[1], dp[2] --> try to update dp[1], even we have new dp[0], it not affect new dp[1], safe to update dp[1] 
(e.g in the same loop for which previous update for dp[0] from 4 to 7, currently dp[0] = 7, dp[1] = 1, dp[2] = 8, new dp[1] = min(1, 8) + 5 = 6, 
it not use new dp[0] = 7 to define the new dp[1], so safe to update dp[1] from 1 to 6)
   2
  3 4
 6 5 7
4 1 8 3
dp: [0, 0, 0, 0] -> [4, 1, 8, 3]  -> [7, 6, 10, 3] -> [9, 10, 10, 3] -> [11, 10, 10, 3]
*/
class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        int rowNum = triangle.size();
        int colNum = triangle.get(rowNum - 1).size();
        int[] dp = new int[colNum];
        for(int i = 0; i < colNum; i++) {
            dp[i] = triangle.get(rowNum - 1).get(i);
        }
        for(int row = rowNum - 2; row >= 0; row--) {
            for(int col = 0; col < triangle.get(row).size(); col++) {
                dp[col] = triangle.get(row).get(col) + Math.min(dp[col], dp[col + 1]);
            }
        }
        return dp[0];
    }
}
