Refer to
https://leetcode.com/problems/encode-and-decode-tinyurl/discuss/100268/Two-solutions-and-thoughts

My first solution produces short URLs like http://tinyurl.com/0, http://tinyurl.com/1, etc, in that order.

class Codec:

    def __init__(self):
        self.urls = []

    def encode(self, longUrl):
        self.urls.append(longUrl)
        return 'http://tinyurl.com/' + str(len(self.urls) - 1)

    def decode(self, shortUrl):
        return self.urls[int(shortUrl.split('/')[-1])]
Using increasing numbers as codes like that is simple but has some disadvantages, which the below solution fixes:

If I'm asked to encode the same long URL several times, it will get several entries. That wastes codes and memory.
People can find out how many URLs have already been encoded. Not sure I want them to know.
People might try to get special numbers by spamming me with repeated requests shortly before their desired number comes up.
Only using digits means the codes can grow unnecessarily large. Only offers a million codes with length 6 (or smaller). 
Using six digits or lower or upper case letters would offer (10+26*2)^6 = 56,800,235,584 codes with length 6.

The following solution doesn't have these problems. It produces short URLs like http://tinyurl.com/KtLa2U, using a 
random code of six digits or letters. If a long URL is already known, the existing short URL is used and no new entry 
is generated.

class Codec:

    alphabet = string.ascii_letters + '0123456789'

    def __init__(self):
        self.url2code = {}
        self.code2url = {}

    def encode(self, longUrl):
        while longUrl not in self.url2code:
            code = ''.join(random.choice(Codec.alphabet) for _ in range(6))
            if code not in self.code2url:
                self.code2url[code] = longUrl
                self.url2code[longUrl] = code
        return 'http://tinyurl.com/' + self.url2code[longUrl]

    def decode(self, shortUrl):
        return self.code2url[shortUrl[-6:]]
        
It's possible that a randomly generated code has already been generated before. In that case, another random code is 
generated instead. Repeat until we have a code that's not already in use. How long can this take? Well, even if we 
get up to using half of the code space, which is a whopping 626/2 = 28,400,117,792 entries, then each code has a 50% 
chance of not having appeared yet. So the expected/average number of attempts is 2, and for example only one in a 
billion URLs takes more than 30 attempts. And if we ever get to an even larger number of entries and this does become
a problem, then we can just use length 7. We'd need to anyway, as we'd be running out of available codes.

* http://www.cnblogs.com/grandyang/p/6562209.html
* 这道题让我们编码和解码精简URL地址，这其实很有用，因为有的链接地址特别的长，
* 就很烦，如果能精简成固定的长度，就很清爽。最简单的一种编码就是用个计数器，
* 当前是第几个存入的url就编码成几，然后解码的时候也能根据数字来找到原来的url
* 上面这种方法虽然简单，但是缺点却很多，首先，如果接受到多次同一url地址，仍然会
* 当做不同的url来处理。当然这个缺点可以通过将vector换成哈希表，每次先查找url
* 是否已经存在。虽然这个缺点可以克服掉，但是由于是用计数器编码，那么当前服务器
* 存了多少url就曝露出来了，也许会有安全隐患。而且计数器编码另一个缺点就是数字
* 会不断的增大，那么编码的长度也就不是确定的了。而题目中明确推荐了使用六位随机字
* 符来编码，那么我们只要在所有大小写字母和数字中随机产生6个字符就可以了，我们用
* 哈希表建立6位字符和url之间的映射，如果随机生成的字符之前已经存在了，我们就继续
* 随机生成新的字符串，直到生成了之前没有的字符串为止。下面的代码中使用了两个哈希表，
* 目的是为了建立六位随机字符串和url之间的相互映射，这样进来大量的相同url时，就不用
* 生成新的随机字符串了。当然，不加这个功能也能通过OJ，这道题的OJ基本上是形同虚设，
* 两个函数分别直接返回参数字符串也能通过OJ
